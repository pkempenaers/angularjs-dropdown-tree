/******/!function(e){function t(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return e[o].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}// webpackBootstrap
/******/
var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}n(1);var i=n(10),s=o(i);angular.module("angularjsExampleDropdownTree",["angularjsDropdownTree"]).component("main",(0,s["default"])())},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}n(2);var i=n(5),s=o(i),l=n(6),r=o(l),d=n(7),a=o(d),c=n(8),p=o(c);angular.module("angularjsDropdownTree",["dropdownTreeOptionRowModule"]).service("dropdownTreeService",s["default"]).directive("dtDropdownToggle",r["default"]).directive("dtDropdownMenu",a["default"]).component("dropdownTree",(0,p["default"])())},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var i=n(3),s=o(i);angular.module("dropdownTreeOptionRowModule",[]).component("dropdownTreeOptionRow",(0,s["default"])())},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function i(){var e={controller:l["default"],templateUrl:"app/component/option-row/option-row.template.html",bindings:{option:"<",settings:"<",selectedOptions:"<",optionClicked:"&",focusNext:"&",focusPrevious:"&",catchKeydown:"&",resetFocusCounter:"&",searchText:"@",customCompare:"<"}};return e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var s=n(4),l=o(s)},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(t,o){"ngInject";n(this,e),this.dropdownTreeService=t,this.$element=o,this.previousSelected=[]}return e.$inject=["dropdownTreeService","$element"],o(e,[{key:"$onInit",value:function(){this.isFolder()&&(this.isOpen=this.dropdownTreeService.shouldFolderBeOpen(this.option,this.settings,this.selectedOptions))}},{key:"$doCheck",value:function(){var e=this;if(angular.isDefined(this.selectedOptions)&&!this.dropdownTreeService.areSameSelections(this.selectedOptions,this.previousSelected)&&this.isFolder()){var t=[];this.selectedOptions.forEach(function(n){e.previousSelected.indexOf(n)<0&&t.push(n)}),this.getChildOptions().some(function(n){return t.indexOf(n)>=0?(e.isOpen=!0,!0):!1}),this.previousSelected=angular.extend([],this.selectedOptions)}}},{key:"getDisplayText",value:function(){return this.dropdownTreeService.getDisplayText(this.option,this.settings)}},{key:"isFolder",value:function(){return this.dropdownTreeService.isFolder(this.option,this.settings)}},{key:"isSubFolder",value:function(){return this.dropdownTreeService.isSubFolder(this.option,this.settings)}},{key:"getChildOptions",value:function(){return this.dropdownTreeService.getChildOptions(this.option,this.settings)}},{key:"innerClicked",value:function(e){this.selectedOptions.indexOf(e)<0&&this.settings.openFolderWhenInnerSelected&&(this.isOpen=!0),this.optionClicked({option:e})}},{key:"selectAllChilds",value:function(){var e=this.dropdownTreeService.selectAllChildOptions(this.option,this.settings,this.selectedOptions,this.searchText);e&&this.optionClicked({option:this.option})}},{key:"isSelected",value:function(){return this.selectedOptions.indexOf(this.option)>=0}},{key:"toggleFolder",value:function(){this.isOpen=!this.isOpen,this.$element[0].querySelectorAll(".focusable")[0].focus()}},{key:"shouldBeVisible",value:function(){return this.dropdownTreeService.isVisible(this.option,this.settings,this.searchText)}},{key:"keyDown",value:function(e){switch(e.key){case"Enter":(!this.isFolder()||this.settings.folderSelectable)&&(this.innerClicked(this.option),e.preventDefault());break;case"ArrowDown":this.focusNext(),e.preventDefault();break;case"ArrowUp":this.focusPrevious(),e.preventDefault();break;case"ArrowRight":this.isFolder()&&(this.isOpen=!0,e.preventDefault());break;case"ArrowLeft":this.isFolder()&&(this.isOpen=!1,e.preventDefault());break;default:this.catchKeydown({event:e})}}}]),e}();t["default"]=i},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){n(this,e)}return o(e,[{key:"getDisplayText",value:function(e,t){return e[t.displayProperty]}},{key:"isFolder",value:function(e,t){return Object.prototype.hasOwnProperty.call(e,t.childrenProperty)&&angular.isArray(e[t.childrenProperty])||Object.prototype.hasOwnProperty.call(e,t.subProperty)&&angular.isArray(e[t.subProperty])}},{key:"isSubFolder",value:function(e,t){return Object.prototype.hasOwnProperty.call(e,t.subProperty)&&angular.isArray(e[t.subProperty])}},{key:"shouldFolderBeOpen",value:function(e,t,n){return t.foldersOpen?t.foldersOpen:t.openFolderWhenInnerSelected?this.hasInnerSelection(e,t,n):!1}},{key:"getChildOptions",value:function(e,t){return angular.isDefined(e[t.childrenProperty])?e[t.childrenProperty]:angular.isDefined(e[t.subProperty])?e[t.subProperty]:void 0}},{key:"selectAllChildOptions",value:function(e,t,n,o){var i=this.getOptionsToAdd(e,t,n,o);return 0===i.length?(this.removeAllChildOptions(e,t,n,o),!0):0===t.selectionLimit?(i.forEach(function(e){n.push(e)}),!0):i.length+n.length<=t.selectionLimit?(i.forEach(function(e){n.push(e)}),!0):!1}},{key:"getOptionsToAdd",value:function(e,t,n,o){var i=this,s=[];return this.isFolder(e,t)?this.getChildOptions(e,t).forEach(function(e){s=s.concat(i.getOptionsToAdd(e,t,n,o))}):n.indexOf(e)<0&&this.isVisible(e,t,o)&&s.push(e),s}},{key:"removeAllChildOptions",value:function(e,t,n,o){var i=this;this.isFolder(e,t)?this.getChildOptions(e,t).forEach(function(e){i.removeAllChildOptions(e,t,n,o)}):n.indexOf(e)>=0&&this.isVisible(e,t,o)&&n.splice(n.indexOf(e),1)}},{key:"isVisible",value:function(e,t,n){var o=this;return this.isFolder(e,t)&&!this.isVisibleItem(e,t,n)?this.getChildOptions(e,t).some(function(e){return o.isVisible(e,t,n)}):this.isVisibleItem(e,t,n)}},{key:"isVisibleItem",value:function(e,t,n){return n.length>0?e[t.displayProperty].toLowerCase().indexOf(n.trim().toLowerCase())>=0:!0}},{key:"hasInnerSelection",value:function(e,t,n){var o=this;return this.isFolder(e,t)?this.getChildOptions(e,t).some(function(e){return n.indexOf(e)>=0?!0:o.hasInnerSelection(e,t,n)}):!1}},{key:"getSelection",value:function(e,t,n){var o=this,i=[];return e.forEach(function(e){i=i.concat(o.getAllChildVisible(e,t,n))}),i}},{key:"getAllChildVisible",value:function(e,t,n){var o=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];return this.isVisible(e,t,n)&&(this.isFolder(e,t)?(t.folderSelectable&&this.isVisibleItem(e,t,n)&&i.push(e),this.getChildOptions(e,t).forEach(function(e){o.getAllChildVisible(e,t,n,i)})):i.push(e)),i}},{key:"areSameSelections",value:function(e,t){return e.length!==t.length?!1:!e.some(function(e){return t.indexOf(e)<0})}},{key:"isSelectAble",value:function(e,t){return this.isFolder(e,t)?t.folderSelectable:!0}}]),e}();t["default"]=i},function(e,t){"use strict";function n(){var e={templateUrl:"app/component/dropdown-toggle/dropdown-toggle.template.html",require:"^dropdownTree",controllerAs:"$ctrl"};return e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(){var e={templateUrl:"app/component/dropdown-menu/dropdown-menu.template.html",controllerAs:"$ctrl",replace:!0};return e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function i(){var e={controller:l["default"],templateUrl:"app/component/dropdownTree.template.html",bindings:{options:"<",externalTexts:"<?texts",externalSelection:"<?selection",externalSettings:"<?settings",selectionChanged:"&"}};return e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var s=n(9),l=o(s)},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(t,o,i,s,l,r,d){"ngInject";function a(e,t){if(!c.settings.sortByDisplayProperty)return 0;if("string"===e.type){var n=e.value.toLowerCase(),o=t.value.toLowerCase();return o>n?-1:n>o?1:0}return e.value<t.value?-1:e.value>t.value?1:0}n(this,e),this.$log=t,this.$document=o,this.$element=i,this.$rootScope=s,this.$compile=l,this.$scope=r,this.dropdownTreeService=d,this.open=!1,this.searchText="",this.selectedOptions=[],this.defaultTexts={optionNames:"items"},this.texts=angular.extend({},this.defaultTexts),this.defaultSettings={selectionLimit:0,removeFromFront:!0,displayProperty:"name",childrenProperty:"children",subProperty:null,disableSearch:!1,closeOnBlur:!0,folderSelectable:!0,selectedClass:["glyphicon","glyphicon-ok"],folderClass:["glyphicon","glyphicon-folder-open"],folderClosedClass:["glyphicon","glyphicon-folder-close"],subClass:["glyphicon","glyphicon-minus"],subClosedClass:["glyphicon","glyphicon-plus"],childClass:["glyphicon","glyphicon-file"],dropdownToggleIconClass:["caret"],appendToElement:this.$element.children(),foldersOpen:!0,openFolderWhenInnerSelected:!1,closeOnSelectionLimitReached:!1,sortByDisplayProperty:!1},this.settings=angular.extend({},this.defaultSettings);var c=this;c.customCompare=a}return e.$inject=["$log","$document","$element","$rootScope","$compile","$scope","dropdownTreeService"],o(e,[{key:"$onChanges",value:function(e){angular.isDefined(e.externalTexts)&&(this.texts=angular.extend({},this.defaultTexts,this.externalTexts)),angular.isDefined(e.externalSelection)&&(angular.isArray(this.externalSelection)?this.selectedOptions=angular.extend([],this.externalSelection):this.$log.error("selection should be an array")),angular.isDefined(e.externalSettings)&&(this.settings=angular.extend({},this.defaultSettings,this.externalSettings))}},{key:"$doCheck",value:function(){angular.isDefined(this.externalSelection)&&!this.dropdownTreeService.areSameSelections(this.externalSelection,this.selectedOptions)&&(this.selectedOptions=angular.extend([],this.externalSelection))}},{key:"toggleDropdown",value:function(){var e=this;this.open=!this.open,this.open?this.$compile("<dt-dropdown-menu></dt-dropdown-menu>".trim())(this.$scope,function(t){e.appendelement=t,e.settings.appendToElement.append(e.appendelement)}):this.appendelement.remove(),this.open&&this.settings.closeOnBlur?(this.closeToggleOnBlurBinded=this.toggleOnBlur.bind(this),this.$document.on("click",this.closeToggleOnBlurBinded)):this.$document.off("click",this.closeToggleOnBlurBinded)}},{key:"toggleOnBlur",value:function(e){var t=this;if(e.target&&e.target.parentElement){for(var n=e.target.parentElement,o=!1;angular.isDefined(n)&&null!==n&&!o;)n.className.split&&n.className.split(" ").indexOf("dropdown-tree-parent")>=0&&!o&&n===this.$element.children()[0]&&(o=!0),n=n.parentElement;o||this.$rootScope.$apply(function(){t.toggleDropdown()})}}},{key:"optionClicked",value:function(e){if(this.dropdownTreeService.isSelectAble(e,this.settings)){var t=this.selectedOptions.indexOf(e);t>=0?this.selectedOptions.splice(t,1):(this.settings.selectionLimit>0&&this.settings.selectionLimit===this.selectedOptions.length&&(this.settings.removeFromFront?this.selectedOptions.splice(0,1):this.selectedOptions.splice(this.selectedOptions.length-1,1)),this.selectedOptions.push(e))}this.emitSelection()}},{key:"selectAllVisible",value:function(){var e=this.dropdownTreeService.getSelection(this.options,this.settings,this.searchText);this.settings.selectionLimit>0&&e.length<=this.settings.selectionLimit&&(this.dropdownTreeService.areSameSelections(e,this.selectedOptions)?this.selectedOptions.splice(0,this.selectedOptions.length):this.selectedOptions=e,this.emitSelection())}},{key:"emitSelection",value:function(){var e=this;angular.isArray(this.externalSelection)&&(this.externalSelection.splice(0,this.externalSelection.length),this.selectedOptions.forEach(function(t){e.externalSelection.push(t)})),this.selectionChanged({selection:this.selectedOptions}),this.settings.closeOnSelectionLimitReached&&0!==this.settings.selectionLimit&&this.selectedOptions.length===this.settings.selectionLimit&&this.toggleDropdown()}},{key:"dropdownToggleKeyDown",value:function(e){switch(e.key){case"ArrowDown":this.open&&(this.focusFirst(),e.preventDefault());break;default:this.catchKeydown(e)}}},{key:"searchKeydown",value:function(e){switch(e.key){case"ArrowDown":this.focusNext(),e.preventDefault();break;case"ArrowUp":this.focusSelf(),e.preventDefault();break;case"Enter":this.selectAllVisible(),e.preventDefault();break;default:this.catchKeydown(e)}}},{key:"catchKeydown",value:function(e){switch(e.key){case"Escape":this.open&&(this.toggleDropdown(),this.focusSelf(),e.preventDefault())}}},{key:"focusFirst",value:function(){this.settings.disableSearch?this.$element[0].querySelectorAll(".focusable")[0].focus():this.$element.find("input")[0].focus()}},{key:"focusNext",value:function(){var e=this.getFocusCounter(),t=this.$element[0].querySelectorAll(".focusable");t.length>e+1&&(e+=1,t[e].focus())}},{key:"focusPrevious",value:function(){var e=this.getFocusCounter(),t=this.$element[0].querySelectorAll(".focusable");e>=1?(e-=1,t[e].focus()):this.settings.disableSearch?this.focusSelf():this.focusFirst()}},{key:"getFocusCounter",value:function(){for(var e=this.$element[0].querySelectorAll(".focusable"),t=this.$document[0].activeElement,n=0;n<e.length;n+=1)if(e[n]===t)return n;return-1}},{key:"focusSelf",value:function(){this.$element.find("button")[0].focus()}},{key:"getButtonText",value:function(){return angular.isFunction(this.settings.getButtonText)?this.settings.getButtonText(this.selectedOptions,this.options,this.texts):0===this.selectedOptions.length?"Select "+this.texts.optionNames:this.selectedOptions.length+" "+this.texts.optionNames+" selected"}}]),e}();t["default"]=i},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function i(){var e={templateUrl:"app/main/main.template.html",controller:l["default"]};return e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var s=n(11),l=o(s)},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(t){"ngInject";n(this,e),this.$log=t}return e.$inject=["$log"],o(e,[{key:"$onInit",value:function(){this.options=[{name:"b",label:"testoption label"},{name:"a",label:"test folder label",children:[{name:"c",label:"test child option c"},{name:"fa",label:"test child option f"},{name:"d",label:"test child option d",subChildren:[{name:"cc",label:"test child option c"},{name:"ff",label:"test child option f"}]}],childoptions:[{name:"test child option",label:"test child option label"}]}],this.settings={selectionLimit:0,removeFromFront:!0,displayProperty:"name",childrenProperty:"children",subProperty:"subChildren",disableSearch:!1,closeOnBlur:!0,folderSelectable:!0,getButtonText:function(e){return e.length>0?e.map(function(e){return e.name}).join(", "):"Select items"},foldersOpen:!0,openFolderWhenInnerSelected:!1,closeOnSelectionLimitReached:!1}}},{key:"selectionChanged",value:function(e){this.$log.debug(e)}},{key:"changeSettings",value:function(){this.settings.selectionLimit=parseInt(this.settings.selectionLimit,10),this.settings=angular.extend({},this.settings)}}]),e}();t["default"]=i}]),angular.module("angularjsExampleDropdownTree").run(["$templateCache",function(e){e.put("app/component/dropdownTree.template.html",'<div class="dropdown dropdown-tree-parent" ng-class="[\r\n			{\'open\': $ctrl.open}\r\n		 ]"><dt-dropdown-toggle></dt-dropdown-toggle></div>'),e.put("app/main/main.template.html","<header><div class=container><a href=https://github.com/pkempenaers/angularjs-dropdown-tree class=\"btn btn-info pull-right gh-button-link\"><strong>View project on<br>GitHub</strong></a><h1>AngularJS Dropdown Tree</h1></div></header><section class=container><p>AngularJS dropdown tree is a dropdown selection component specificaly build for options that can be ordered in a tree structure. On this page you can find a simple example and some documentation on how to configure the component.</p><div class=instalation><h2>Instalation</h2><h3>Recomended</h3><ol><li>Using bower:<pre>bower install angularjs-dropdown-tree</pre></li><li>Using npm:<pre>npm install angularjs-dropdown-tree</pre></li></ol><h3>Not recommended</h3><ol><li>Using rawgit: <a href=https://rawgit.com/pkempenaers/angularjs-dropdown-tree/master/component/component.js>link</a></li><li>Getting the source from <a href=https://github.com/pkempenaers/angularjs-dropdown-tree/archive/master.zip>here</a></li></ol></div><div class=example><h2>Examlpe</h2><dropdown-tree options=$ctrl.options selection-changed=$ctrl.selectionChanged(selection) settings=$ctrl.settings></dropdown-tree><div class=example-settings><div><h3>Example options</h3><pre>{{$ctrl.options | json}}</pre></div><div><h3>Example settings</h3><div><div><label>selectionLimit: <input ng-model=$ctrl.settings.selectionLimit ng-change=$ctrl.changeSettings()></label></div><div><label><input type=checkbox ng-model=$ctrl.settings.removeFromFront ng-change=$ctrl.changeSettings()> removeFromFront</label></div><div><label>displayProperty: <input ng-model=$ctrl.settings.displayProperty ng-change=$ctrl.changeSettings()></label></div><div><label>childrenProperty: <input ng-model=$ctrl.settings.childrenProperty ng-change=$ctrl.changeSettings()></label></div><div><label>subProperty: <input ng-model=$ctrl.settings.subProperty ng-change=$ctrl.changeSettings()></label></div><div><label><input type=checkbox ng-model=$ctrl.settings.disableSearch ng-change=$ctrl.changeSettings()> disableSearch</label></div><div><label><input type=checkbox ng-model=$ctrl.settings.closeOnBlur ng-change=$ctrl.changeSettings()> closeOnBlur</label></div><div><label><input type=checkbox ng-model=$ctrl.settings.folderSelectable ng-change=$ctrl.changeSettings()> folderSelectable</label></div><div><label><input type=checkbox ng-model=$ctrl.settings.foldersOpen ng-change=$ctrl.changeSettings()> foldersOpen</label></div><div><label><input type=checkbox ng-model=$ctrl.settings.openFolderWhenInnerSelected ng-change=$ctrl.changeSettings()> openFolderWhenInnerSelected</label></div><div><label><input type=checkbox ng-model=$ctrl.settings.closeOnSelectionLimitReached ng-change=$ctrl.changeSettings()> closeOnSelectionLimitReached</label></div><div><label><input type=checkbox ng-model=$ctrl.settings.sortByDisplayProperty ng-change=$ctrl.changeSettings()> sortByDisplayProperty</label></div></div></div></div></div><div><h2>Documentation</h2><div><h3>Overview of attributes</h3><table class=\"table table-bordered\"><thead><tr><td>Name</td><td>Required</td><td>Type</td><td>Use</td></tr></thead><tbody><tr><td>options</td><td>Yes</td><td>Array of Objects</td><td>The selectable options</td></tr><tr><td>selection-changed</td><td>Yes</td><td>function(selection)</td><td>Will be called every time the selection changes.</td></tr><tr><td>settings</td><td>No</td><td>Object</td><td>Configures the component</td></tr><tr><td>selection</td><td>No</td><td>Array of Objects</td><td>Can be used to set the selection externaly, all objects in the array should also be in the options Array.</td></tr><tr><td>texts</td><td>No</td><td>Object</td><td>Configures the static texts in the component</td></tr></tbody></table></div><div><h3>Options</h3><p>Should be an array of objects with a name (or a property that can be used as a name), and optionaly an array of child objects with the same structure.</p></div><div><h3>Settings</h3><p>An object used to configure the component, all the properties are optional.</p><table class=\"table table-bordered\"><thead><tr><td>Name</td><td>Default value</td><td>Type</td><td>Use</td></tr></thead><tbody><tr><td>displayProperty</td><td>'name'</td><td>string</td><td>The property of the option that should be used to display it.</td></tr><tr><td>childrenProperty</td><td>'children'</td><td>string</td><td>The property that holds the child options.</td></tr><tr><td>subProperty</td><td>null</td><td>string</td><td>The property that holds the subFolder options. These will be displayed using the subClass and subClosedClass. The childrenProperty will always be taken first so an option will never be a folder and a subFolder</td></tr><tr><td>selectedClass</td><td>['glyphicon', 'glyphicon-ok']</td><td>string or array of string</td><td>When an option is selcted a span is added with the classes configured</td></tr><tr><td>folderClass</td><td>['glyphicon', 'glyphicon-folder-open']</td><td>string or array of strings</td><td>Class of the span before the name of an option when the option is a folder and the folder is opened</td></tr><tr><td>folderClosedClass</td><td>['glyphicon', 'glyphicon-folder-close']</td><td>string or array of strings</td><td>Class of the span before the name of an option when the option is a folder and the folder is closed</td></tr><tr><td>subClass</td><td>['glyphicon', 'glyphicon-minus']</td><td>string or array of strings</td><td>Class of the span before the name of an option when the option is a subFolder and the subFolder is opened</td></tr><tr><td>subClosedClass</td><td>['glyphicon', 'glyphicon-plus']</td><td>string or array of strings</td><td>Class of the span before the name of an option when the option is a subFolder and the subFolder is closed</td></tr><tr><td>childClass</td><td>['glyphicon', 'glyphicon-file']</td><td>string or array of strings</td><td>Class of the span before the name of an option when the option is not a folder</td></tr><tr><td>dropdownToggleIconClass</td><td>['caret']</td><td>string or array of strings</td><td>Class of caret icon in the dropdown-toggle</td></tr><tr><td>closeOnBlur</td><td>true</td><td>boolean</td><td>When true will close the dropdown when clicked outside of it.</td></tr><tr><td>folderSelectable</td><td>true</td><td>boolean</td><td>When true a folder is selectable otherwise only children can be selected</td></tr><tr><td>disableSearch</td><td>false</td><td>boolean</td><td>When false an input field that enables filtering the options will be available</td></tr><tr><td>selectionLimit</td><td>0</td><td>int</td><td>Limits the amount of options that can be selected at the same time (when 0, no limit)</td></tr><tr><td>removeFromFront</td><td>true</td><td>boolean</td><td>When selectoinLimit is set, defines if on selection the limit would be passed from where in the array an option should be removed (front/back)</td></tr><tr><td>getButtonText</td><td>undefined</td><td>function</td><td>Should return the string that you want to display in the dropdown toggle. Is called with as first argument the current selection, second argument the selection-array and third argument the texts object.</td></tr><tr><td>foldersOpen</td><td>true</td><td>boolean</td><td>Defines if all folders should be open by default.</td></tr><tr><td>openFolderWhenInnerSelected</td><td>false</td><td>boolean</td><td>Only applicable when foldersOpen set to false. Will still open a folder when a child is selected.</td></tr><tr><td>closeOnSelectionLimitReached</td><td>false</td><td>boolean</td><td>Only applicable when selectionLimit different from 0. Will close the dropdown when selection reaches the specified selectionLimit</td></tr><tr><td>sortByDisplayProperty</td><td>false</td><td>boolean</td><td>Will sort the options by the displayProperty</td></tr></tbody></table></div><div><h3>Texts</h3><p>An object used to configure the texts used in the component, all the properties are optional and strings.</p><table class=\"table table-bordered\"><thead><tr><td>Name</td><td>Default value</td><td>Use</td></tr></thead><tbody><tr><td>optionNames</td><td>'items'</td><td>Used in the dropdown-toggle to indicate what needs to be selected.</td></tr></tbody></table></div><div><h3>Keyboard controls</h3><p>The component offers some basic keyboard controls:<ul><li>Navigate between options with arrow keys.</li><li>Selecting options using Enter.</li><li>Closing dropdown using Escape.</li><li>Opening folder with right arrow key</li><li>Closing folder with left arrow key</li></ul>Also some more advanced controls are available:<ul><li>When the search is focused:<ul><li>When current selection doesn't match search, the search will be the new selection.</li><li>When current selection matches the current search, the selection will be cleared.</li></ul></li></ul></p></div></div></section>"),e.put("app/component/dropdown-menu/dropdown-menu.template.html",'<div class=dropdown-menu><div class="top-menu form-group" ng-if=!$ctrl.settings.disableSearch><input class=form-control ng-if=!$ctrl.settings.disableSearch type=text ng-model=$ctrl.searchText placeholder=Search ng-keydown=$ctrl.searchKeydown($event)></div><ul><dropdown-tree-option-row ng-repeat="option in $ctrl.options | orderBy:$ctrl.settings.displayProperty:false:$ctrl.customCompare track by $index" option=option settings=$ctrl.settings option-clicked=$ctrl.optionClicked(option) selected-options=$ctrl.selectedOptions focus-next=$ctrl.focusNext() focus-previous=$ctrl.focusPrevious() catch-keydown=$ctrl.catchKeydown(event) reset-focus-counter=$ctrl.resetFocusCounter(element) search-text={{$ctrl.searchText}} custom-compare=$ctrl.customCompare></dropdown-tree-option-row></ul></div>'),e.put("app/component/dropdown-toggle/dropdown-toggle.template.html",'<button class="dropdown-toggle btn btn-default" ng-click=$ctrl.toggleDropdown() ng-keydown=$ctrl.dropdownToggleKeyDown($event)><span class=selection-text>{{$ctrl.getButtonText()}} </span><span ng-class=$ctrl.settings.dropdownToggleIconClass></span></button>'),e.put("app/component/option-row/option-row.template.html",'<li ng-if=$ctrl.shouldBeVisible()><div class=option ng-class="[\r\n				{\'folder\': $ctrl.isFolder()},\r\n			 ]"><div class=title><span ng-if=$ctrl.isSelected() ng-class=$ctrl.settings.selectedClass></span> <span ng-if="$ctrl.isFolder() && !$ctrl.isSubFolder()" ng-click=$ctrl.toggleFolder() ng-class="$ctrl.isOpen ? $ctrl.settings.folderClass : $ctrl.settings.folderClosedClass"></span> <span ng-if="$ctrl.isFolder() && $ctrl.isSubFolder()" ng-click=$ctrl.toggleFolder() ng-class="$ctrl.isOpen ? $ctrl.settings.subClass : $ctrl.settings.subClosedClass"></span> <span ng-if=!$ctrl.isFolder() ng-class=$ctrl.settings.childClass></span> <span tabindex=-1 ng-click="((!$ctrl.isFolder() || $ctrl.settings.folderSelectable) && $ctrl.innerClicked($ctrl.option)) || ($ctrl.isFolder() && !$ctrl.settings.folderSelectable && $ctrl.selectAllChilds())" ng-keydown=$ctrl.keyDown($event) class=focusable>{{$ctrl.getDisplayText()}}</span></div><ul class=children ng-if="$ctrl.isFolder() && ($ctrl.isOpen || ($ctrl.shouldBeVisible() && $ctrl.searchText.length !== 0))"><dropdown-tree-option-row ng-repeat="option in $ctrl.getChildOptions() | orderBy:$ctrl.settings.displayProperty:false:$ctrl.customCompare track by $index" option=option settings=$ctrl.settings option-clicked=$ctrl.innerClicked(option) selected-options=$ctrl.selectedOptions focus-next=$ctrl.focusNext() focus-previous=$ctrl.focusPrevious() catch-keydown=$ctrl.keyDown(event) reset-focus-counter=$ctrl.resetFocusCounter(element) search-text={{$ctrl.searchText}}></dropdown-tree-option-row></ul></div></li>')}]);
//# sourceMappingURL=../maps/scripts/app.js.map
